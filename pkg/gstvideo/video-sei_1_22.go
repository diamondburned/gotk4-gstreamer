// Code generated by girgen. DO NOT EDIT.

package gstvideo

import (
	"runtime"
	"unsafe"

	"github.com/OmegaRogue/gotk4-gstreamer/pkg/gst"
	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <glib-object.h>
// #include <gst/video/video.h>
import "C"

// BufferAddVideoSeiUserDataUnregisteredMeta attaches
// VideoSEIUserDataUnregisteredMeta metadata to buffer with the given
// parameters.
//
// The function takes the following parameters:
//
//   - buffer: Buffer.
//   - uuid: user Data Unregistered UUID.
//   - data: SEI User Data Unregistered buffer.
//   - size of the data buffer.
//
// The function returns the following values:
//
//   - videoSEIUserDataUnregisteredMeta on buffer.
//
func BufferAddVideoSeiUserDataUnregisteredMeta(buffer *gst.Buffer, uuid, data *byte, size uint) *VideoSEIUserDataUnregisteredMeta {
	var _arg1 *C.GstBuffer                           // out
	var _arg2 *C.guint8                              // out
	var _arg3 *C.guint8                              // out
	var _arg4 C.gsize                                // out
	var _cret *C.GstVideoSEIUserDataUnregisteredMeta // in

	_arg1 = (*C.GstBuffer)(gextras.StructNative(unsafe.Pointer(buffer)))
	_arg2 = (*C.guint8)(unsafe.Pointer(uuid))
	_arg3 = (*C.guint8)(unsafe.Pointer(data))
	_arg4 = C.gsize(size)

	_cret = C.gst_buffer_add_video_sei_user_data_unregistered_meta(_arg1, _arg2, _arg3, _arg4)
	runtime.KeepAlive(buffer)
	runtime.KeepAlive(uuid)
	runtime.KeepAlive(data)
	runtime.KeepAlive(size)

	var _videoSEIUserDataUnregisteredMeta *VideoSEIUserDataUnregisteredMeta // out

	_videoSEIUserDataUnregisteredMeta = (*VideoSEIUserDataUnregisteredMeta)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _videoSEIUserDataUnregisteredMeta
}

// The function returns the following values:
//
//   - gType for the VideoSEIUserDataUnregisteredMeta structure.
//
func VideoSeiUserDataUnregisteredMetaApiGetType() coreglib.Type {
	var _cret C.GType // in

	_cret = C.gst_video_sei_user_data_unregistered_meta_api_get_type()

	var _gType coreglib.Type // out

	_gType = coreglib.Type(_cret)

	return _gType
}

// VideoSeiUserDataUnregisteredParsePrecisionTimeStamp parses and returns the
// Precision Time Stamp (ST 0604) from the SEI User Data Unregistered buffer.
//
// The function takes the following parameters:
//
//   - userData: VideoSEIUserDataUnregisteredMeta.
//
// The function returns the following values:
//
//   - status: user Data Unregistered UUID.
//   - precisionTimeStamp: parsed Precision Time Stamp SEI.
//   - ok: true if data is a Precision Time Stamp and it was parsed correctly.
//
func VideoSeiUserDataUnregisteredParsePrecisionTimeStamp(userData *VideoSEIUserDataUnregisteredMeta) (byte, uint64, bool) {
	var _arg1 *C.GstVideoSEIUserDataUnregisteredMeta // out
	var _arg2 C.guint8                               // in
	var _arg3 C.guint64                              // in
	var _cret C.gboolean                             // in

	_arg1 = (*C.GstVideoSEIUserDataUnregisteredMeta)(gextras.StructNative(unsafe.Pointer(userData)))

	_cret = C.gst_video_sei_user_data_unregistered_parse_precision_time_stamp(_arg1, &_arg2, &_arg3)
	runtime.KeepAlive(userData)

	var _status byte               // out
	var _precisionTimeStamp uint64 // out
	var _ok bool                   // out

	_status = byte(_arg2)
	_precisionTimeStamp = uint64(_arg3)
	if _cret != 0 {
		_ok = true
	}

	return _status, _precisionTimeStamp, _ok
}

// VideoSEIUserDataUnregisteredMeta: h.264 H.265 metadata from SEI User Data
// Unregistered messages
//
// An instance of this type is always passed by reference.
type VideoSEIUserDataUnregisteredMeta struct {
	*videoSEIUserDataUnregisteredMeta
}

// videoSEIUserDataUnregisteredMeta is the struct that's finalized.
type videoSEIUserDataUnregisteredMeta struct {
	native *C.GstVideoSEIUserDataUnregisteredMeta
}

// Meta: parent Meta.
func (v *VideoSEIUserDataUnregisteredMeta) Meta() *gst.Meta {
	valptr := &v.native.meta
	var _v *gst.Meta // out
	_v = (*gst.Meta)(gextras.NewStructNative(unsafe.Pointer(valptr)))
	return _v
}

// UUID: user Data Unregistered UUID.
func (v *VideoSEIUserDataUnregisteredMeta) UUID() [16]byte {
	valptr := &v.native.uuid
	var _v [16]byte // out
	_v = *(*[16]byte)(unsafe.Pointer(&*valptr))
	return _v
}

// Data: unparsed data buffer.
func (v *VideoSEIUserDataUnregisteredMeta) Data() *byte {
	valptr := &v.native.data
	var _v *byte // out
	_v = (*byte)(unsafe.Pointer(*valptr))
	return _v
}

// Size of the data buffer.
func (v *VideoSEIUserDataUnregisteredMeta) Size() uint {
	valptr := &v.native.size
	var _v uint // out
	_v = uint(*valptr)
	return _v
}

// Size of the data buffer.
func (v *VideoSEIUserDataUnregisteredMeta) SetSize(size uint) {
	valptr := &v.native.size
	*valptr = C.gsize(size)
}

// The function returns the following values:
//
//   - metaInfo pointer that describes VideoSEIUserDataUnregisteredMeta.
//
func VideoSEIUserDataUnregisteredMetaGetInfo() *gst.MetaInfo {
	var _cret *C.GstMetaInfo // in

	_cret = C.gst_video_sei_user_data_unregistered_meta_get_info()

	var _metaInfo *gst.MetaInfo // out

	_metaInfo = (*gst.MetaInfo)(gextras.NewStructNative(unsafe.Pointer(_cret)))

	return _metaInfo
}
